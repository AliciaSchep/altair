% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vega-tooltip.R
\name{tooltip_field}
\alias{tooltip_field}
\title{Create a field specification for a Vega tooltip}
\usage{
tooltip_field(field = NULL, title = field, formatType = NULL,
  format = NULL, valueAccessor = NULL, render = NULL, aggregate = NULL)
}
\arguments{
\item{field}{\code{character}, the unique name of the field.
With Vega-Lite, this is the field you provided to each encoding channel.}

\item{title}{\code{character} or \code{JS_EVAL} object created using
\code{\link[=JS]{JS()}}, a custom title for the field,
or an accessor function that generates it from the scenegraph datum.}

\item{formatType}{\code{character}, tells what kind of field this is
(for formatting the field value in the tooltip)
Supported values: \code{"number"}, \code{"time"}, and \code{"string"}.}

\item{format}{\code{character} or \code{JS_EVAL} object created using
\code{\link[=JS]{JS()}}
\itemize{
\item \strong{string}:  a string specifier for formatting the field value
in the tooltip. If \code{formatType} is \code{"number"}, you can provide a
\href{https://github.com/d3/d3-format#locale_format}{number format string-specifier}.
If \code{formatType} is \code{"time"}, you can provide a
\href{https://github.com/d3/d3-time-format#locale_format}{time format string-specifier}.
If \code{formatType} is \code{"string"}, there is no need to provide a format.
\item \strong{function}: function that returns a string, in which case \code{formatType} is ignored.
}}

\item{valueAccessor}{\code{JS_EVAL} object created using \code{\link[=JS]{JS()}}}

\item{render}{\code{JS_EVAL} object created using \code{\link[=JS]{JS()}}}

\item{aggregate}{\code{character}}
}
\description{
Create a field specification for a Vega tooltip
}
\keyword{internal}
