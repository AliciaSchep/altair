% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vega-tooltip.R
\name{vega_tooltip}
\alias{vega_tooltip}
\alias{vega_tooltip_encoding}
\alias{vega_tooltip_all}
\title{Create a Vega tooltip-specification}
\usage{
vega_tooltip(showAllFields = FALSE, fields = NULL, delay = 100,
  onAppear = NULL, onMove = NULL, onDisappear = NULL,
  colorTheme = c("light", "dark"), sort = c("title", "value"))

vega_tooltip_encoding(showAllFields = NULL, ...)

vega_tooltip_all(showAllFields = TRUE, ...)
}
\arguments{
\item{showAllFields}{\code{logical}, indicates which fields to include in tooltip.
\itemize{
\item \code{TRUE}: include all fields in the data.
\item \code{FALSE}: include only those fields specified in \code{fields}.
Use this with empty \code{fields} to suppress tooltip.
\item \code{NULL}: include only those fields encoded in the chart.
}}

\item{fields}{\code{list}, tooltip specification to use if \code{showAllFields == FALSE}.
Use \code{\link[=add_field]{add_field()}} to specify.}

\item{delay}{\code{numeric} number of milliseconds tooltip display
should be delayed.}

\item{onAppear}{\code{JS_EVAL} object created using \code{\link[=JS]{JS()}},
a function with arguments: \code{event}, \code{item}.
Callback when tooltip first appears
(when mouse moves over a new item in visualization).}

\item{onMove}{\code{JS_EVAL} object created using \code{\link[=JS]{JS()}},
a function with arguments: \code{event}, \code{item}.
Callback when tooltip moves
(e.g., when mouse moves within a bar).}

\item{onDisappear}{\code{JS_EVAL} object created using \code{\link[=JS]{JS()}},
a function with arguments: \code{event}, \code{item}.
Callback when tooltip disappears
(when mouse moves out an item).}

\item{colorTheme}{\code{character} color theme picker}

\item{sort}{\code{character} or  \code{JS_EVAL} object created using
\code{\link[htmlwidgets:JS]{htmlwidgets::JS()}},
specify sorting fields on either
\code{"title"}, or \code{"value"}, using sorting orders:
\itemize{
\item dates and strings are sorted ascending, numbers descending
\item dates appear first, then numbers, then strings
}}

\item{...}{other arguments passed to \code{\link[=vega_tooltip]{vega_tooltip()}}}
}
\value{
S3 object with class \code{vega_tooltip}
}
\description{
This function creates a Vega tooltip-specification according to the options
detailed in the \href{https://github.com/vega/vega-tooltip/blob/master/docs/customizing_your_tooltip.md#options}{Vega tooltip documentation}.
}
\details{
This function is called \code{vega_tooltip()} because the tooltip specification
made for the Vega JavaScript library; it is independent from the Altair
Python package.

A tooltip specification is separate from a chart specification; they are
combined when they are both rendered into an htmlwidget, using \code{\link[=vegalite]{vegalite()}}.
One conseqence of this is that you can have exactly one tooltip
specification per chart, even a compound chart.

There are three versions of this function, each will result in a different
default behavior of the tooltip:

\describe{
\item{\code{vega_tooltip()}}{no tooltip is displayed,
absent the use of \code{\link[=add_field]{add_field()}}}
\item{\code{vega_tooltip_encoding()}}{tooltip displays all the variables
in the chart's encoding}
\item{\code{vega_tooltip_all()}}{tooltip displays all the variables
in the chart's data}
}

To customize the fields in a tooltip specification, begin with with a
specification with no fields, using \code{vega_tooltip()}. To add fields
(variables) to the specification, pipe this to the \code{\link[=add_field]{add_field()}} function
for as many fields as you wish to add. See the included example that
composes \code{tooltip_custom}.

You can use the \code{\link[=examine]{examine()}} function to interactively examine
a tooltip specification.
}
\examples{
  plot_basic <-
    alt$Chart(
      r_to_py(mtcars)
    )$encode(
      x = "mpg:Q",
      y = "hp:Q",
      color = "cyl:N"
    )$mark_point()

\dontrun{
  vegalite(plot_basic, tooltip = vega_tooltip_encoding())
}

tooltip_custom <-
  vega_tooltip() \%>\%
  add_field(field = "mpg", title = "MPG") \%>\%
  add_field(field = "hp", title = "HP")

\dontrun{
  vegalite(plot_basic, tooltip = tooltip_custom)
}

}
\seealso{
\href{https://github.com/vega/vega-tooltip/blob/master/docs/customizing_your_tooltip.md#options}{Vega tooltip documentation},
\code{\link[=add_field]{add_field()}}, \code{\link[=vegalite]{vegalite()}}, \code{\link[=examine]{examine()}}
}
